#+startup: hideblocks
#+property: header-args :noweb yes :async

* Common
#+name: detect_edges
#+BEGIN_SRC python
def detect_edges(frame):
    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
    lower_blue = numpy.array([60, 40, 40])
    upper_blue = numpy.array([150, 255, 255])
    mask = cv2.inRange(hsv, lower_blue, upper_blue)
    edges = cv2.Canny(mask, 200, 400)
    return edges
#+END_SRC

#+name: display_lines
#+BEGIN_SRC python
def display_lines(frame, lines, line_color=(0, 255, 0), line_width=2):
    line_image = numpy.zeros_like(frame)
    if lines is not None:
        for line in lines:
            for x1, y1, x2, y2 in line:
                cv2.line(line_image, (x1, y1), (x2, y2), line_color, line_width)
    line_image = cv2.addWeighted(frame, 0.8, line_image, 1, 1)
    return line_image
#+END_SRC

#+name: detect_lane
#+BEGIN_SRC python
def detect_lane(frame):

    edges = detect_edges(frame)
    cropped_edges = region_of_interest(edges)
    line_segments = detect_line_segments(cropped_edges)
    lane_lines = average_slope_intercept(frame, line_segments)
    
    return lane_lines
#+END_SRC

#+name: region_of_interest
#+BEGIN_SRC python
def region_of_interest(edges):
    height, width = edges.shape
    mask = numpy.zeros_like(edges)

    # only focus bottom half of the screen
    polygon = numpy.array([[
        (0, height * 1 / 2),
        (width, height * 1 / 2),
        (width, height),
        (0, height),
    ]], numpy.int32)

    cv2.fillPoly(mask, polygon, 255)
    cropped_edges = cv2.bitwise_and(edges, mask)
    return cropped_edges
#+END_SRC

#+name: detect_line_segments
#+BEGIN_SRC python
def detect_line_segments(cropped_edges):
    # tuning min_threshold, minLineLength, maxLineGap is a trial and error process by hand
    rho = 1  # distance precision in pixel, i.e. 1 pixel
    angle = numpy.pi / 180  # angular precision in radian, i.e. 1 degree
    min_threshold = 10  # minimal of votes
    line_segments = cv2.HoughLinesP(cropped_edges, rho, angle, min_threshold, 
                                    numpy.array([]), minLineLength=8, maxLineGap=4)

    return line_segments
#+END_SRC

#+name: average_slope_intercept
#+BEGIN_SRC python
<<make_points>>

def average_slope_intercept(frame, line_segments):
    """
    This function combines line segments into one or two lane lines
    If all line slopes are < 0: then we only have detected left lane
    If all line slopes are > 0: then we only have detected right lane
    """
    lane_lines = []
    if line_segments is None:
        return lane_lines

    height, width, _ = frame.shape
    left_fit = []
    right_fit = []

    boundary = 1/3
    left_region_boundary = width * (1 - boundary)  # left lane line segment should be on left 2/3 of the screen
    right_region_boundary = width * boundary # right lane line segment should be on left 2/3 of the screen

    for line_segment in line_segments:
        for x1, y1, x2, y2 in line_segment:
            if x1 == x2:
                continue
            fit = numpy.polyfit((x1, x2), (y1, y2), 1)
            slope = fit[0]
            intercept = fit[1]
            if slope < 0:
                if x1 < left_region_boundary and x2 < left_region_boundary:
                    left_fit.append((slope, intercept))
            else:
                if x1 > right_region_boundary and x2 > right_region_boundary:
                    right_fit.append((slope, intercept))

    left_fit_average = numpy.average(left_fit, axis=0)
    if len(left_fit) > 0:
        lane_lines.append(make_points(frame, left_fit_average))

    right_fit_average = numpy.average(right_fit, axis=0)
    if len(right_fit) > 0:
        lane_lines.append(make_points(frame, right_fit_average))

    return lane_lines
#+END_SRC

#+name: make_points
#+BEGIN_SRC python
def make_points(frame, line):
    height, width, _ = frame.shape
    slope, intercept = line
    y1 = height  # bottom of the frame
    y2 = int(y1 * 1 / 2)  # make points from middle of the frame down

    # bound the coordinates within the frame
    x1 = max(-width, min(2 * width, int((y1 - intercept) / slope)))
    x2 = max(-width, min(2 * width, int((y2 - intercept) / slope)))
    return [[x1, y1, x2, y2]]
#+END_SRC

#+name: display_heading_line
#+BEGIN_SRC python
def display_heading_line(frame, steering_angle, line_color=(0, 0, 255), line_width=5 ):
    heading_image = numpy.zeros_like(frame)
    height, width, _ = frame.shape

    # figure out the heading line from steering angle
    # heading line (x1,y1) is always center bottom of the screen
    # (x2, y2) requires a bit of trigonometry

    steering_angle_radian = steering_angle / 180.0 * math.pi
    x1 = int(width / 2)
    y1 = height
    x2 = int(x1 - height / 2 / math.tan(steering_angle_radian))
    y2 = int(height / 2)
    
    cv2.putText(frame, f"{steering_angle} deg", (int(width/2) - 40, y2-10), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 0), 1, cv2.LINE_AA)
    cv2.line(heading_image, (x1, y1), (x2, y2), line_color, line_width)
    heading_image = cv2.addWeighted(frame, 0.8, heading_image, 1, 1)

    return heading_image
#+END_SRC

#+name: stabilize_steering_angle
#+BEGIN_SRC python
def stabilize_steering_angle(
          curr_steering_angle, 
          new_steering_angle, 
          num_of_lane_lines, 
          max_angle_deviation_two_lines=5, 
          max_angle_deviation_one_lane=1):
    """
    Using last steering angle to stabilize the steering angle
    if new angle is too different from current angle, 
    only turn by max_angle_deviation degrees
    """
    if num_of_lane_lines == 2 :
        # if both lane lines detected, then we can deviate more
        max_angle_deviation = max_angle_deviation_two_lines
    else :
        # if only one lane detected, don't deviate too much
        max_angle_deviation = max_angle_deviation_one_lane
    
    angle_deviation = new_steering_angle - curr_steering_angle
    if abs(angle_deviation) > max_angle_deviation:
        stabilized_steering_angle = int(curr_steering_angle
            + max_angle_deviation * angle_deviation / abs(angle_deviation))
    else:
        stabilized_steering_angle = new_steering_angle
    return stabilized_steering_angle
#+END_SRC

* App
#+name: include
#+BEGIN_SRC python
import numpy
import cv2
import math
import sys

<<detect_edges>>
<<display_lines>>
<<region_of_interest>>
<<detect_line_segments>>
<<average_slope_intercept>>
<<detect_lane>>
<<display_heading_line>>
<<stabilize_steering_angle>>

def getMp4Colorless(name: str, fps: int) -> cv2.VideoWriter:
    return cv2.VideoWriter(
        filename = f"{name}_{fps}fps.mp4",
        fourcc = cv2.VideoWriter_fourcc(*'X264'),
        fps = fps,
        frameSize = (640,480), 
        isColor = False)

def getMp4Color(name: str, fps: int) -> cv2.VideoWriter:
    return cv2.VideoWriter(
        filename = f"{name}_{fps}fps.mp4",
        fourcc = cv2.VideoWriter_fourcc(*'X264'),
        fps = fps,
        frameSize = (640,480), 
        isColor = True)

#+END_SRC

** Image
#+BEGIN_SRC python :tangle ../app/image.py
<<include>>

frame = cv2.imread(sys.argv[1])
lane_lines = detect_lane(frame)
height, width, _ = frame.shape

#2 lane detected
_, _, left_x2, _ = lane_lines[0][0]
_, _, right_x2, _ = lane_lines[1][0]
mid = int(width / 2)
x_offset = (left_x2 + right_x2) / 2 - mid
y_offset = int(height / 2)

#Only 1 lane detected
# x1, _, x2, _ = lane_lines[0][0]
# x_offset = x2 - x1
# y_offset = int(height / 2)

angle_to_mid_radian = math.atan(x_offset / y_offset)  # angle (in radian) to center vertical line
angle_to_mid_deg = int(angle_to_mid_radian * 180.0 / math.pi)  # angle (in degrees) to center vertical line
steering_angle = angle_to_mid_deg + 90  # this is the steering angle needed by picar front wheel

lane_lines_image = display_lines(frame, lane_lines)
cv2.imshow("lane lines", lane_lines_image)
cv2.imshow("", display_heading_line(frame, steering_angle))
cv2.waitKey(0)
#+END_SRC

** Video
#+BEGIN_SRC python :tangle ../app/video.py
<<include>>

capture = cv2.VideoCapture(sys.argv[1])
steering_angle_previous = 90
steering_angle = 90
certainty = 0
certaintyThreshold = 50
state = "+stop"
statePrevious = None

while capture.isOpened():
    ret, frame = capture.read()
    lane_lines = detect_lane(frame)
    height, width, _ = frame.shape
    
    # #print(lane_lines)
    # for line in lane_lines:
    #     slope = (line[0][3]-line[0][1])/(line[0][2]-line[0][0])
    #     print(slope)
    #     if (abs(slope) > 4 or abs(slope) < 1):
        
    #2 lane detected
    if len(lane_lines) == 2:
        for line in lane_lines:
            slope = (line[0][3]-line[0][1])/(line[0][2]-line[0][0])
            #print(slope)
            if (abs(slope) > 7 or abs(slope) < 1):
                if (certainty > 0): certainty -= 1

        if certainty == certaintyThreshold:
            _, _, left_x2, _ = lane_lines[0][0]
            _, _, right_x2, _ = lane_lines[1][0]
            mid = int(width / 2)
            x_offset = (left_x2 + right_x2) / 2 - mid
            y_offset = int(height / 2)

            angle_to_mid_radian = math.atan(x_offset / y_offset)
            angle_to_mid_deg = int(angle_to_mid_radian * 180.0 / math.pi)
            steering_angle = angle_to_mid_deg + 90 
            # elif len(lane_lines) == 1:
            #     x1, _, x2, _ = lane_lines[0][0]
            #     x_offset = x2 - x1
            #     y_offset = int(height / 2)
            # else:
            #     break
            steering_angle = stabilize_steering_angle(steering_angle_previous, steering_angle, 2)

            if (state == "+stop"):
                state = "+start"
            else:
                state = steering_angle
        else:
            certainty += 1
    else:
        if (certainty >= certaintyThreshold):
            steering_angle = 90
            state = "+stop"
        certainty = 0

    if (state != statePrevious):
        print(state)
            
        
    lane_lines_image = display_lines(frame, lane_lines)
    cv2.imshow("lane lines", lane_lines_image)
    cv2.imshow("", display_heading_line(frame, steering_angle))

    steering_angle_previous = steering_angle
    statePrevious = state
    if cv2.waitKey(1) == ord('q'):
        break

capture.release()
cv2.destroyAllWindows()
cv2.waitKey(0)
#+END_SRC

** Edge test
   #+BEGIN_SRC python :tangle ../app/edge_test.py
import cv2
import numpy
import sys

def detect_edges(frame):
    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
    lower_blue = numpy.array([60, 40, 40])
    upper_blue = numpy.array([150, 255, 255])
    mask = cv2.inRange(hsv, lower_blue, upper_blue)
    edges = cv2.Canny(mask, 200, 400)
    return edges

def detect_line_segments(cropped_edges):
    # tuning min_threshold, minLineLength, maxLineGap is a trial and error process by hand
    rho = 1  # distance precision in pixel, i.e. 1 pixel
    angle = numpy.pi / 180  # angular precision in radian, i.e. 1 degree
    min_threshold = 10  # minimal of votes
    line_segments = cv2.HoughLinesP(cropped_edges, rho, angle, min_threshold, 
                                    numpy.array([]), minLineLength=8, maxLineGap=4)

    return line_segments

capture = cv2.VideoCapture(sys.argv[1])
while capture.isOpened():
    ret, frame = capture.read()
    lane_lines = detect_line_segments(detect_edges(frame))
    height, width, _ = frame.shape

    print(f"lanes: {lane_lines}")
    # for line in lane_lines:
    #     slope = (line[0][3]-line[0][1])/(line[0][2]-line[0][0])
    #     print(line)
    # print('')

    if cv2.waitKey(1) == ord('q'):
        break

capture.release()
cv2.destroyAllWindows()
cv2.waitKey(0)   
   #+END_SRC

** Demo (Video)
   #+BEGIN_SRC python :dir ../demo/handControllingCamera :async 
<<include>>

edgesOutput = getMp4Colorless('edges', fps = 30)
hsvOutput = getMp4Color('hsv', fps = 30)
croppedEdgesOutput = getMp4Colorless('croppedEdges', fps = 30)
lineSegmentOutput = getMp4Color('lineSegments', fps = 30)
averageLanesOutput = getMp4Color('averageLanes', fps = 30)
laneLineOutput = getMp4Color('laneLine', fps = 30)

capture = cv2.VideoCapture('myTapeLanes_handMotion_gain17.mp4')
while capture.isOpened():
    ret, frame = capture.read()
    if ret==True:
        hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
        lower_blue = numpy.array([60, 40, 40])
        upper_blue = numpy.array([150, 255, 255])
        mask = cv2.inRange(hsv, lower_blue, upper_blue)
        edges = cv2.Canny(mask, 200, 400)

        cropped_edges = region_of_interest(edges)
        lineSegments = detect_line_segments(cropped_edges)
        lane_lines = average_slope_intercept(frame, lineSegments)

        height, width, _ = frame.shape
        
        #2 lane detected
        if len(lane_lines) == 2:
            _, _, left_x2, _ = lane_lines[0][0]
            _, _, right_x2, _ = lane_lines[1][0]
            mid = int(width / 2)
            x_offset = (left_x2 + right_x2) / 2 - mid
            y_offset = int(height / 2)

        angle_to_mid_radian = math.atan(x_offset / y_offset)
        angle_to_mid_deg = int(angle_to_mid_radian * 180.0 / math.pi)
        steering_angle = angle_to_mid_deg + 90  

        edgesOutput.write(edges)
        hsvOutput.write(hsv)
        croppedEdgesOutput.write(cropped_edges)
        lineSegmentOutput.write(display_lines(frame, lineSegments))
        averageLanesOutput.write(display_lines(frame, lane_lines))
        laneLineOutput.write(display_heading_line(frame, steering_angle))        
        
    else:
        break

capture.release()
edgesOutput.release()
hsvOutput.release()
croppedEdgesOutput.release()
lineSegmentOutput.release()
averageLanesOutput.release()
laneLineOutput.release()
cv2.destroyAllWindows()
cv2.waitKey(0)
   #+END_SRC


** Demo 2
   #+BEGIN_SRC python
<<include>>
capture = cv2.VideoCapture('../../raw/myTapeLanes_handMotion_gain17.mp4')
while capture.isOpened():
    ret, frame = capture.read()
    lane_lines = detect_lane(frame)
    height, width, _ = frame.shape
    
    #2 lane detected
    if len(lane_lines) == 2:
        _, _, left_x2, _ = lane_lines[0][0]
        _, _, right_x2, _ = lane_lines[1][0]
        mid = int(width / 2)
        x_offset = (left_x2 + right_x2) / 2 - mid
        y_offset = int(height / 2)
        # elif len(lane_lines) == 1:
        #     x1, _, x2, _ = lane_lines[0][0]
        #     x_offset = x2 - x1
        #     y_offset = int(height / 2)
        # else:
        #     break
        cv2.line(line_image, (x1, y1), (x2, y2), line_color, line_width)
        line_image = cv2.addWeighted(frame, 0.8, line_image, 1, 1)

        angle_to_mid_radian = math.atan(x_offset / y_offset)
        angle_to_mid_deg = int(angle_to_mid_radian * 180.0 / math.pi)
        steering_angle = angle_to_mid_deg + 90  

    lane_lines_image = display_lines(frame, lane_lines)
    cv2.imshow("lane lines", lane_lines_image)
    cv2.imshow("", display_heading_line(frame, steering_angle))

    print(steering_angle)

    if cv2.waitKey(30) == ord('q'):
        break

capture.release()
cv2.destroyAllWindows()
cv2.waitKey(0)
   #+END_SRC

   #+RESULTS:
   : None
