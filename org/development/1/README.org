#+LATEX_HEADER: \usepackage[letterpaper, margin = 1in]{geometry}
#+options: toc:t num:t
#+export_exclude_tags: noexport

#+title: FrostAV Development
#+subtitle: Stage 1: Base
#+date: Updated \today

* System Abstraction
  #+attr_latex: :width 0.8\linewidth :placement [H]
  #+caption: Fundamental module abstraction. Consists of a wired-bus for inter-communication between modules on the Frost vehicle, and a wireless-bus for communication with a server or an ssh client. Bridge Controllers act as the coupling between the vehicle and the modules that do not depend on the vehicle interface. 
  [[../figure/2019-09-16_AbstractSystem.png]]

** Abstract System Operation Description
   The Frost Autonomous Vehicle consists of a vehicle and a system for
   controlling the vehicle. The vehicle provides an interface mainly
   to move it and to steer it. Bridge Controllers handle the
   peripherals that make up the vehicle interface. Bridge Controllers
   cannot operate unless they have instructions. These instructions
   come from a wired-bus. Different types of modules can send
   instructions to the wired-bus. The most important modules are the
   Networker and each individual Sensor System. Sensor Systems provide
   feedback for the Bridge Controllers to act upon. Furthermore, the
   Networker transfers information between the wired-bus and the
   wireless-bus. The wireless-bus allows for communication with
   devices that are not on the vehicle itself. Overall, the abstract
   system provides a map for how information is received and directed
   towards the vehicle's interaction with the environment. 

** Bridge Controllers
   "Bridge" refers to a software design pattern from the Gang of Four,
   which intends to "decouple an abstraction from its implementation
   so that the two can vary independently." As such, the Bridge
   Controllers will have software that implements the Bridge design
   pattern, so that implementation code (for a specific vehicle) is
   decoupled from the system interface.

** Networker
   The Networker is reponsible for transfering information between the
   wireless-bus and the wired-bus.

** Sensor Systems 
   Various Sensor Systems may be added to the wired-bus. An individual
   Sensor System should receive information from a sensor, process the
   information, and send the result to the wired-bus.
  
* System Plan
  #+attr_latex: :width 0.8\linewidth :placement [H]
  [[./figure/2019-09-22_Implementation.png]]

** System Operation Description
   The PS3 Eye Camera provides visual information about the
   environment. This information will be processed with the OpenCV
   library on a Raspberry Pi 2 with an Arch ARM operating
   system. Processed camera information will then be piped through
   \(I^2C\) to the Bridge Controllers. The Servo Bridge Controller has
   a PWM output which directly drives the steering servo. The Motor
   Bridge Controller has a PWM output that is handled by the
   electronic speed controller (ESC), which drives the motor.

** System Assumptions
  The assumption made in this development stage is that the motor
  speed and servo steering angle can be controlled individually, such
  that motor speed and steering angle do not require direct knowledge
  of each other. Hence, the arrows from the wired-bus to the Servo and
  Motor Bridge Controllers are unidirectional. This assumption is
  meant to simplify the \(I^2C\) wired-bus configuration - since
  bi-directional communication on this bus would require
  arbitration. 

** Bus Communication
   JSON will be used as the format for data for both the wireless and
   wired buses. JSON provides easy to understand data structure
   packets that can be serialized and sent as a stream. Using JSON
   sacrifices speed for readability and extendability of the system.

*** Wireless-Bus
   In this stage the wireless-bus should allow for an SSH
   client to connect to it. As such, JSON packets that would normally
   be sent to the wireless-bus, will instead be stored locally in
   the system, but will be callable from an SSH client. 

*** Wired-Bus
   For the wired-bus, \(I^2C\) will be used. \(I^2C\) addressing will
   be done manually for each slave connected to the bus. Data will be
   sent from master to slaves via the JSON format.

** Block Function Description
*** Raspberry Pi 2 (RPi2)
    The RPi2 has an Arch Linux ARM operating system. It is responsible
    for processing camera information from the PS3 Eye. It is also
    responsible for being the Networker, which transfers information
    between the wired and wireless buses.
*** Servo Bridge Controller (ATMEGA328P)
    Processes commands from the wired-bus to control the vehicle
    steering servo.
*** Motor Bridge Controller (ATMEGA328P)
    Processes commands from the wired-bus to control the vehicle
    motor's speed.
*** PS3 Eye Camera
    Provides images over USB, for environmental perception.
*** Electronic Speed Controller (DYNS2211)
    Takes in a PWM signal and outputs an amplified and directional PWM
    wave to the vehicle's motor.
*** Power Supply
    Takes the 12v input from the battery and steps the voltage down to 5v
    to power the vehicle's systems. Also provides current and voltage monitoring.
    
* Power Supply Design
The function of the power supply is to step down the 12v (nominal) battery voltage to 5v
for powering the vehicle's systems. The power supply is designed to be cabable of outputting
3A with a 9v input (9v is the lowest safe charge for a 3-cell LiPo battery). The system should
use much less than 3A on average, but a 3A output provides a large margin of error. The power supply
is also capable of measuring the battery voltage and battery current draw and reporting these values
over the I2C bus.

[[./figure/pcb_3d_render.PNG]]
 
The power supply is implemented using a TI LM2596SM-5.0 buck switching regulator. A TI INA226 current and 
power monitoring IC is used to measure the current and voltage at the power supply's input. This measurement
should allow for an estimation of the battery's remaining capacity as well as allowing the system to safely 
shut down when the battery voltage is low. Since the logic and car's drive batteries are seperate, this 
prevents the car from going out of control if the logic battery runs out before the drive battery.


The switching regulator section of the power supply consists of C1, C2, L1, D1 and U2 in the schematic diagram.
The regulator operates in a buck configuration, in continuous mode (the inductor current never falls to zero).
A buck regulator 

[[./figure/schematic.PNG]]

The input capacitor C1 is used to prevent large voltage transients from occurring at the input of the regulator,
and provide the large instantanious current when the "switch" is turned on. This capacitor is a 680uF low-ESR
(equivalent series resistance) electrolytic. Low ESR is important in a buck converter because it allows the capacitor to 
handle higher current spikes. The output capacitor C2 (also a 680uF low-esr electrolytic) is used to reduce the ripple on the 
regulator's output and provide stability to the control loop. Even though the regulator's maximum output
voltage is 5v, a 35v electrolytic is used because capacitors with a higher voltage rating have a lower ESR than ones with a 
lower voltage rating.



* Control Abstraction
  #+attr_latex: :width \linewidth :placement [H]
  [[../figure/2019-10-24_controlLoop.png]]

* Control Plan
  #+attr_latex: :width \linewidth :placement [H]
  [[../figure/2019-10-24_cameraToControl.png]]


* Future
** I2C Arbitration
   It is expected that modules communicating on the wired bus will
   need to communicate with each-other. In this case, there would be
   multiple masters on a single i2c bus. To implement this,
   arbitration would be necessary so that masters on the bus do not
   interrupt each other.
    
    
** COMMENT Resources
   - http://www.mbeddedc.com/2017/09/i2c-bus-arbitration.html
   - https://www.geeksforgeeks.org/bus-arbitration-in-computer-organization/
