# Created 2019-09-16 Mon 16:07
#+OPTIONS: num:nil toc:t
#+TITLE: System Requirements Specification
#+EXPORT_FILE_NAME: README
The intention of this document is not to over-constrain the
development of Frost; rather, it provides a framework for which a
minimally working autonomous vehicle can emerge. This document does
not take precedence over the [[https://agilemanifesto.org/][Agile Manifesto]], nor should it interfere
with the use of the [[https://www.scrum.org/resources/what-is-scrum][Scrum]] framework.

* Introduction
** Purpose
Specify the purpose the SyRS and its intended audience. 
** Scope
Describe the scope of the system to be produced. Within the
description, include: • The identity of the system • A brief
description of the system’s functionality • An explanation of what the
system will and will not do • A description of the application of the
system • A description of the relevant benefits, objectives, and goals
of the system This description should be consistent with similar
statements in preceding project documents.
* System Description
** System Context
Provide appropriate diagrams and accompanying narratives to provide
an overview of the context of the system, defining all significant
interfaces crossing the system’s boundaries.
** Operational Scenarios
Provide descriptive operational scenarios for the system. An
operational scenario is a step-by-step description of how the
system should operate and interact with its users and its external
interfaces under a given set of circumstances. Scenarios may also
be used to describe what the system should not do.
** Major System Capabilities
Provide diagrams and accompanying narratives to depict major
capability groupings of the requirements.
** Major System Constraints
Describe the major system constraints. Constraints limit the scope
and functionality of the system including, but not limited to,
regulatory policies, infrastructure limitations, resources, and
licensing. Constraints are requirements that are imposed on the
solution by circumstance, force, or compulsion. They limit,
absolutely, the options available to a designer of a solution by
imposing immovable boundaries and limits.
*** System Constraints
The system should be capable of controlling the car without any
sensors built into the car chassis itself (no encoders, speed sensors,
etc.) The main navigation system should run on embedded Linux, and
interface with the car using an AVR or similar microcontroller. The
car use two cameras in a stereo configuration, along
with an IMU (accelerometer and gyroscope) for navigating the course.

*** Lower Chassis Constraints
1. Must have the ability to store up to two 3-cell Litium Ion Battery.
2. Must house the drive train and gearbox through the middle.
3. Must contain all required components with little to no interference.
4. Must be secrely fastened using M5 bolts to the rest of the lower chasis, as it is reponsible for holding the weight of the upper chassis and hardware.
5. Batteries must be secured using velcro straps.
6. Electronic Speed Controller (Motor Driver) may optionally be mounted in the lower chasis.

*** Upper Chassis Constraints
1. The second tier must mount the central processing unit, power supply unit, AVR chips, and both cameras.
2. This layer must implement a quick disconnect mounting system.
3. Must having a hole through the platform for wire managment and connections.
** Assumptions
Assumptions are factors that are believed to be true during the
life cycle of the project that, if changed, may affect the project
outcomes negatively including, but not limited to, end-user
characteristics, known technology infrastructure, resource
availability, and funding availability.
* System Capabilities, Conditions, and Constraints
** Functional Requirements
The finished product for the Automated Car project must be capable of
navigating a test circuit which contains lanes, corners and signs. The
car needs to travel within the lane provided and recover when it
leaves the lane. The car
must be able to recognize and follow signs, and stop for
obstacles until they are removed from the circuit.
The system should be minimally invasive (ex. not using encoders
or speed sensors built into the car) so that it can easily be adapted
to other car platforms. The car should be able to repeatedly follow the circuit.
While turning, the car must be able to maintain its lane and return if it accidentaly leaves it.
The system must be capable of accepting commands over Wifi, and the vehicle must stop if the network connection is lost
The car must be assembled well, using printed circuit boards (no breadboards), reliable fixtures for all components and reliable electrical interconnects.
** Interfaces
The car will be powered on via a power switch. 
The car will receive commands over a WiFi network.
** Performance Requirements
Performance Requirements

1. The total power consumption of the design cannot exceed the maximum capacity of the batteries.

2. The design must be transferable to any similar sized RC car without modifying the servo or motor.

3. The car must not move outside the track more than 3 times per lap.
   Definintion: When all four tires are outside the marked edge, the car is considered off track.

4. The car must identify multiple road signs using optical character recognition and react accordingly.

5. In the event of a stop sign, the car must wait exactly 5 seconds before proceeding.

6. In the event of a SLOW sign, the car must reduce its current speed by 50%.

7. In the event of an obstacle, the car must stop and wait until the obstacle is removed.
   Definition: If the car touches the obstacle, then it fails this requirement.

8. The minimum stopping distance for obstacle collision is 2 inches.

9. The embedded linux system, as well as all other controllers,
   shall cumminicate using a shared I2C bus.

10. The car power must be independently supplied using two 3-cell lithium ion batteries.
